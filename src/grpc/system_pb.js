/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.idns.system.BoolMessage', null, global);
goog.exportSymbol('proto.idns.system.BytesMessage', null, global);
goog.exportSymbol('proto.idns.system.Command', null, global);
goog.exportSymbol('proto.idns.system.CommandResponse', null, global);
goog.exportSymbol('proto.idns.system.DatabaseQuery', null, global);
goog.exportSymbol('proto.idns.system.DatabaseUpdate', null, global);
goog.exportSymbol('proto.idns.system.EmptyMessage', null, global);
goog.exportSymbol('proto.idns.system.StringMessage', null, global);
goog.exportSymbol('proto.idns.system.U64Message', null, global);
goog.exportSymbol('proto.idns.system.Version', null, global);
goog.exportSymbol('proto.idns.system.Version.SoftVersion', null, global);
goog.exportSymbol(
  'proto.idns.system.WalletBalanceTransferRequest',
  null,
  global,
);
goog.exportSymbol('proto.idns.system.WalletGetBalancesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.Version = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.Version.displayName = 'proto.idns.system.Version';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.Version.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.Version.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.Version} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.Version.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 3, ''),
        description: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.Version}
 */
proto.idns.system.Version.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.Version();
  return proto.idns.system.Version.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.Version}
 */
proto.idns.system.Version.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.idns.system.Version.SoftVersion} */ (
          reader.readEnum()
        );
        msg.setVersion(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.Version.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.Version.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * @enum {number}
 */
proto.idns.system.Version.SoftVersion = {
  V_0_1_0: 0,
};

/**
 * optional SoftVersion version = 1;
 * @return {!proto.idns.system.Version.SoftVersion}
 */
proto.idns.system.Version.prototype.getVersion = function () {
  return /** @type {!proto.idns.system.Version.SoftVersion} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {!proto.idns.system.Version.SoftVersion} value */
proto.idns.system.Version.prototype.setVersion = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.idns.system.Version.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.system.Version.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string description = 5;
 * @return {string}
 */
proto.idns.system.Version.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.idns.system.Version.prototype.setDescription = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.Command = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.Command.displayName = 'proto.idns.system.Command';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.Command.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.Command.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.Command} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.Command.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        serviceName: jspb.Message.getFieldWithDefault(msg, 1, ''),
        methodName: jspb.Message.getFieldWithDefault(msg, 2, ''),
        headersMap: (f = msg.getHeadersMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        data: msg.getData_asB64(),
        nonce: jspb.Message.getFieldWithDefault(msg, 99, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.Command}
 */
proto.idns.system.Command.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.Command();
  return proto.idns.system.Command.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.Command}
 */
proto.idns.system.Command.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setServiceName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMethodName(value);
        break;
      case 3:
        var value = msg.getHeadersMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
          );
        });
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      case 99:
        var value = /** @type {string} */ (reader.readString());
        msg.setNonce(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.Command.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.Command.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString,
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(99, f);
  }
};

/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.idns.system.Command.prototype.getServiceName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.system.Command.prototype.setServiceName = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string method_name = 2;
 * @return {string}
 */
proto.idns.system.Command.prototype.getMethodName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.system.Command.prototype.setMethodName = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * map<string, string> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.idns.system.Command.prototype.getHeadersMap = function (
  opt_noLazyCreate,
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

proto.idns.system.Command.prototype.clearHeadersMap = function () {
  this.getHeadersMap().clear();
};

/**
 * optional bytes data = 5;
 * @return {string}
 */
proto.idns.system.Command.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.idns.system.Command.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.idns.system.Command.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/** @param {!(string|Uint8Array)} value */
proto.idns.system.Command.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional string nonce = 99;
 * @return {string}
 */
proto.idns.system.Command.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 99, ''));
};

/** @param {string} value */
proto.idns.system.Command.prototype.setNonce = function (value) {
  jspb.Message.setProto3StringField(this, 99, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.CommandResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.CommandResponse.displayName =
    'proto.idns.system.CommandResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.CommandResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.CommandResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.CommandResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.CommandResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        headersMap: (f = msg.getHeadersMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        data: msg.getData_asB64(),
        nonce: jspb.Message.getFieldWithDefault(msg, 99, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.CommandResponse}
 */
proto.idns.system.CommandResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.CommandResponse();
  return proto.idns.system.CommandResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.CommandResponse}
 */
proto.idns.system.CommandResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setStatus(value);
        break;
      case 3:
        var value = msg.getHeadersMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
          );
        });
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      case 99:
        var value = /** @type {string} */ (reader.readString());
        msg.setNonce(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.CommandResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.CommandResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString,
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(99, f);
  }
};

/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.idns.system.CommandResponse.prototype.getStatus = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.system.CommandResponse.prototype.setStatus = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * map<string, string> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.idns.system.CommandResponse.prototype.getHeadersMap = function (
  opt_noLazyCreate,
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

proto.idns.system.CommandResponse.prototype.clearHeadersMap = function () {
  this.getHeadersMap().clear();
};

/**
 * optional bytes data = 5;
 * @return {string}
 */
proto.idns.system.CommandResponse.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.idns.system.CommandResponse.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.idns.system.CommandResponse.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/** @param {!(string|Uint8Array)} value */
proto.idns.system.CommandResponse.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};

/**
 * optional string nonce = 99;
 * @return {string}
 */
proto.idns.system.CommandResponse.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 99, ''));
};

/** @param {string} value */
proto.idns.system.CommandResponse.prototype.setNonce = function (value) {
  jspb.Message.setProto3StringField(this, 99, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.EmptyMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.EmptyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.EmptyMessage.displayName = 'proto.idns.system.EmptyMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.EmptyMessage.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.EmptyMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.EmptyMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.EmptyMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.EmptyMessage}
 */
proto.idns.system.EmptyMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.EmptyMessage();
  return proto.idns.system.EmptyMessage.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.EmptyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.EmptyMessage}
 */
proto.idns.system.EmptyMessage.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.EmptyMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.EmptyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.EmptyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.EmptyMessage.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.U64Message = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.U64Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.U64Message.displayName = 'proto.idns.system.U64Message';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.U64Message.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.U64Message.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.U64Message} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.U64Message.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.U64Message}
 */
proto.idns.system.U64Message.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.U64Message();
  return proto.idns.system.U64Message.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.U64Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.U64Message}
 */
proto.idns.system.U64Message.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.U64Message.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.U64Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.U64Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.U64Message.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getData();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 data = 1;
 * @return {number}
 */
proto.idns.system.U64Message.prototype.getData = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.system.U64Message.prototype.setData = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.BoolMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.BoolMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.BoolMessage.displayName = 'proto.idns.system.BoolMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.BoolMessage.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.BoolMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.BoolMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.BoolMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: jspb.Message.getFieldWithDefault(msg, 1, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.BoolMessage}
 */
proto.idns.system.BoolMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.BoolMessage();
  return proto.idns.system.BoolMessage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.BoolMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.BoolMessage}
 */
proto.idns.system.BoolMessage.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.BoolMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.BoolMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.BoolMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.BoolMessage.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getData();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool data = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.system.BoolMessage.prototype.getData = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 1, false)
  );
};

/** @param {boolean} value */
proto.idns.system.BoolMessage.prototype.setData = function (value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.BytesMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.BytesMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.BytesMessage.displayName = 'proto.idns.system.BytesMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.BytesMessage.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.BytesMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.BytesMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.BytesMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.BytesMessage}
 */
proto.idns.system.BytesMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.BytesMessage();
  return proto.idns.system.BytesMessage.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.BytesMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.BytesMessage}
 */
proto.idns.system.BytesMessage.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.BytesMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.BytesMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.BytesMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.BytesMessage.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.idns.system.BytesMessage.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.idns.system.BytesMessage.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.idns.system.BytesMessage.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/** @param {!(string|Uint8Array)} value */
proto.idns.system.BytesMessage.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.StringMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.StringMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.StringMessage.displayName =
    'proto.idns.system.StringMessage';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.StringMessage.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.StringMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.StringMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.StringMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.StringMessage}
 */
proto.idns.system.StringMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.StringMessage();
  return proto.idns.system.StringMessage.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.StringMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.StringMessage}
 */
proto.idns.system.StringMessage.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.StringMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.StringMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.StringMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.StringMessage.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string data = 1;
 * @return {string}
 */
proto.idns.system.StringMessage.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.system.StringMessage.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.DatabaseQuery = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.DatabaseQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.DatabaseQuery.displayName =
    'proto.idns.system.DatabaseQuery';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.DatabaseQuery.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.DatabaseQuery.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.DatabaseQuery} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.DatabaseQuery.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sql: jspb.Message.getFieldWithDefault(msg, 1, ''),
        size: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.DatabaseQuery}
 */
proto.idns.system.DatabaseQuery.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.DatabaseQuery();
  return proto.idns.system.DatabaseQuery.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.DatabaseQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.DatabaseQuery}
 */
proto.idns.system.DatabaseQuery.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSql(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSize(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.DatabaseQuery.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.DatabaseQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.DatabaseQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.DatabaseQuery.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSql();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
};

/**
 * optional string sql = 1;
 * @return {string}
 */
proto.idns.system.DatabaseQuery.prototype.getSql = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.system.DatabaseQuery.prototype.setSql = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.idns.system.DatabaseQuery.prototype.getSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.idns.system.DatabaseQuery.prototype.setSize = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.DatabaseUpdate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.DatabaseUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.DatabaseUpdate.displayName =
    'proto.idns.system.DatabaseUpdate';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.DatabaseUpdate.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.DatabaseUpdate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.DatabaseUpdate} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.DatabaseUpdate.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sql: jspb.Message.getFieldWithDefault(msg, 1, ''),
        argsJson: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.DatabaseUpdate}
 */
proto.idns.system.DatabaseUpdate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.DatabaseUpdate();
  return proto.idns.system.DatabaseUpdate.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.DatabaseUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.DatabaseUpdate}
 */
proto.idns.system.DatabaseUpdate.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSql(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setArgsJson(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.DatabaseUpdate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.system.DatabaseUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.DatabaseUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.DatabaseUpdate.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSql();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getArgsJson();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string sql = 1;
 * @return {string}
 */
proto.idns.system.DatabaseUpdate.prototype.getSql = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.system.DatabaseUpdate.prototype.setSql = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string args_json = 2;
 * @return {string}
 */
proto.idns.system.DatabaseUpdate.prototype.getArgsJson = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.system.DatabaseUpdate.prototype.setArgsJson = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.WalletGetBalancesResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.WalletGetBalancesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.WalletGetBalancesResponse.displayName =
    'proto.idns.system.WalletGetBalancesResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.WalletGetBalancesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.WalletGetBalancesResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.WalletGetBalancesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.WalletGetBalancesResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        balance: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.WalletGetBalancesResponse}
 */
proto.idns.system.WalletGetBalancesResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.WalletGetBalancesResponse();
  return proto.idns.system.WalletGetBalancesResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.WalletGetBalancesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.WalletGetBalancesResponse}
 */
proto.idns.system.WalletGetBalancesResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setAddress(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readUint64());
          msg.setBalance(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.WalletGetBalancesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.system.WalletGetBalancesResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.WalletGetBalancesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.WalletGetBalancesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.idns.system.WalletGetBalancesResponse.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.system.WalletGetBalancesResponse.prototype.setAddress = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 balance = 3;
 * @return {number}
 */
proto.idns.system.WalletGetBalancesResponse.prototype.getBalance = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.idns.system.WalletGetBalancesResponse.prototype.setBalance = function (
  value,
) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.system.WalletBalanceTransferRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.system.WalletBalanceTransferRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.system.WalletBalanceTransferRequest.displayName =
    'proto.idns.system.WalletBalanceTransferRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.system.WalletBalanceTransferRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.system.WalletBalanceTransferRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.system.WalletBalanceTransferRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.system.WalletBalanceTransferRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        toAddress: jspb.Message.getFieldWithDefault(msg, 1, ''),
        amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.system.WalletBalanceTransferRequest}
 */
proto.idns.system.WalletBalanceTransferRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.system.WalletBalanceTransferRequest();
  return proto.idns.system.WalletBalanceTransferRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.system.WalletBalanceTransferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.system.WalletBalanceTransferRequest}
 */
proto.idns.system.WalletBalanceTransferRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setToAddress(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readUint64());
          msg.setAmount(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.system.WalletBalanceTransferRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.system.WalletBalanceTransferRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.system.WalletBalanceTransferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.system.WalletBalanceTransferRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getToAddress();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getAmount();
    if (f !== 0) {
      writer.writeUint64(3, f);
    }
  };

/**
 * optional string to_address = 1;
 * @return {string}
 */
proto.idns.system.WalletBalanceTransferRequest.prototype.getToAddress =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.system.WalletBalanceTransferRequest.prototype.setToAddress =
  function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.idns.system.WalletBalanceTransferRequest.prototype.getAmount =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
  };

/** @param {number} value */
proto.idns.system.WalletBalanceTransferRequest.prototype.setAmount = function (
  value,
) {
  jspb.Message.setProto3IntField(this, 3, value);
};

goog.object.extend(exports, proto.idns.system);
