/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.idns.storage.FileEntity', null, global);
goog.exportSymbol(
  'proto.idns.storage.ListFilesByCategoryRequest',
  null,
  global,
);
goog.exportSymbol('proto.idns.storage.ListFilesRequest', null, global);
goog.exportSymbol('proto.idns.storage.ListFilesResponse', null, global);
goog.exportSymbol('proto.idns.storage.MkdirRequest', null, global);
goog.exportSymbol('proto.idns.storage.MkdirResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.FileEntity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.storage.FileEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.FileEntity.displayName = 'proto.idns.storage.FileEntity';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.FileEntity.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.FileEntity.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.FileEntity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.FileEntity.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, 0),
        parentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        fileName: jspb.Message.getFieldWithDefault(msg, 3, ''),
        fileHash: jspb.Message.getFieldWithDefault(msg, 4, ''),
        fileSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
        fileType: jspb.Message.getFieldWithDefault(msg, 6, ''),
        isDir: jspb.Message.getFieldWithDefault(msg, 7, false),
        category: jspb.Message.getFieldWithDefault(msg, 8, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.FileEntity}
 */
proto.idns.storage.FileEntity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.FileEntity();
  return proto.idns.storage.FileEntity.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.FileEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.FileEntity}
 */
proto.idns.storage.FileEntity.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setParentId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFileName(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setFileHash(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setFileSize(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setFileType(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsDir(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setCategory(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.FileEntity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.storage.FileEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.FileEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.FileEntity.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFileHash();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeUint64(5, f);
  }
  f = message.getFileType();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getIsDir();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.idns.storage.FileEntity.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.storage.FileEntity.prototype.setId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 parent_id = 2;
 * @return {number}
 */
proto.idns.storage.FileEntity.prototype.getParentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.idns.storage.FileEntity.prototype.setParentId = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string file_name = 3;
 * @return {string}
 */
proto.idns.storage.FileEntity.prototype.getFileName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.storage.FileEntity.prototype.setFileName = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string file_hash = 4;
 * @return {string}
 */
proto.idns.storage.FileEntity.prototype.getFileHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.idns.storage.FileEntity.prototype.setFileHash = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional uint64 file_size = 5;
 * @return {number}
 */
proto.idns.storage.FileEntity.prototype.getFileSize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.idns.storage.FileEntity.prototype.setFileSize = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string file_type = 6;
 * @return {string}
 */
proto.idns.storage.FileEntity.prototype.getFileType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/** @param {string} value */
proto.idns.storage.FileEntity.prototype.setFileType = function (value) {
  jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional bool is_dir = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.storage.FileEntity.prototype.getIsDir = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 7, false)
  );
};

/** @param {boolean} value */
proto.idns.storage.FileEntity.prototype.setIsDir = function (value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional string category = 8;
 * @return {string}
 */
proto.idns.storage.FileEntity.prototype.getCategory = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/** @param {string} value */
proto.idns.storage.FileEntity.prototype.setCategory = function (value) {
  jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.ListFilesRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.storage.ListFilesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.ListFilesRequest.displayName =
    'proto.idns.storage.ListFilesRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.ListFilesRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.ListFilesRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.ListFilesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.ListFilesRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        parentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.ListFilesRequest}
 */
proto.idns.storage.ListFilesRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.ListFilesRequest();
  return proto.idns.storage.ListFilesRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.ListFilesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.ListFilesRequest}
 */
proto.idns.storage.ListFilesRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setParentId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.ListFilesRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.storage.ListFilesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.ListFilesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.ListFilesRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
};

/**
 * optional uint64 parent_id = 1;
 * @return {number}
 */
proto.idns.storage.ListFilesRequest.prototype.getParentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.storage.ListFilesRequest.prototype.setParentId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.ListFilesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.storage.ListFilesResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.storage.ListFilesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.ListFilesResponse.displayName =
    'proto.idns.storage.ListFilesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.storage.ListFilesResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.ListFilesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.ListFilesResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.ListFilesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.ListFilesResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        filesList: jspb.Message.toObjectList(
          msg.getFilesList(),
          proto.idns.storage.FileEntity.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.ListFilesResponse}
 */
proto.idns.storage.ListFilesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.ListFilesResponse();
  return proto.idns.storage.ListFilesResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.ListFilesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.ListFilesResponse}
 */
proto.idns.storage.ListFilesResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.idns.storage.FileEntity();
        reader.readMessage(
          value,
          proto.idns.storage.FileEntity.deserializeBinaryFromReader,
        );
        msg.addFiles(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.ListFilesResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.storage.ListFilesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.ListFilesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.ListFilesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.idns.storage.FileEntity.serializeBinaryToWriter,
    );
  }
};

/**
 * repeated FileEntity files = 1;
 * @return {!Array<!proto.idns.storage.FileEntity>}
 */
proto.idns.storage.ListFilesResponse.prototype.getFilesList = function () {
  return /** @type{!Array<!proto.idns.storage.FileEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.idns.storage.FileEntity, 1)
  );
};

/** @param {!Array<!proto.idns.storage.FileEntity>} value */
proto.idns.storage.ListFilesResponse.prototype.setFilesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.idns.storage.FileEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idns.storage.FileEntity}
 */
proto.idns.storage.ListFilesResponse.prototype.addFiles = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.idns.storage.FileEntity,
    opt_index,
  );
};

proto.idns.storage.ListFilesResponse.prototype.clearFilesList = function () {
  this.setFilesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.ListFilesByCategoryRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.storage.ListFilesByCategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.ListFilesByCategoryRequest.displayName =
    'proto.idns.storage.ListFilesByCategoryRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.ListFilesByCategoryRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.ListFilesByCategoryRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.ListFilesByCategoryRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.ListFilesByCategoryRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        parentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        category: jspb.Message.getFieldWithDefault(msg, 2, ''),
        limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.ListFilesByCategoryRequest}
 */
proto.idns.storage.ListFilesByCategoryRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.ListFilesByCategoryRequest();
  return proto.idns.storage.ListFilesByCategoryRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.ListFilesByCategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.ListFilesByCategoryRequest}
 */
proto.idns.storage.ListFilesByCategoryRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */ (reader.readUint64());
          msg.setParentId(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setCategory(value);
          break;
        case 3:
          var value = /** @type {number} */ (reader.readUint32());
          msg.setLimit(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.ListFilesByCategoryRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.storage.ListFilesByCategoryRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.ListFilesByCategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.ListFilesByCategoryRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getParentId();
    if (f !== 0) {
      writer.writeUint64(1, f);
    }
    f = message.getCategory();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
    f = message.getLimit();
    if (f !== 0) {
      writer.writeUint32(3, f);
    }
  };

/**
 * optional uint64 parent_id = 1;
 * @return {number}
 */
proto.idns.storage.ListFilesByCategoryRequest.prototype.getParentId =
  function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
  };

/** @param {number} value */
proto.idns.storage.ListFilesByCategoryRequest.prototype.setParentId = function (
  value,
) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string category = 2;
 * @return {string}
 */
proto.idns.storage.ListFilesByCategoryRequest.prototype.getCategory =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/** @param {string} value */
proto.idns.storage.ListFilesByCategoryRequest.prototype.setCategory = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint32 limit = 3;
 * @return {number}
 */
proto.idns.storage.ListFilesByCategoryRequest.prototype.getLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.idns.storage.ListFilesByCategoryRequest.prototype.setLimit = function (
  value,
) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.MkdirRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.storage.MkdirRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.MkdirRequest.displayName =
    'proto.idns.storage.MkdirRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.MkdirRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.MkdirRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.MkdirRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.MkdirRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        parentId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        fileName: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.MkdirRequest}
 */
proto.idns.storage.MkdirRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.MkdirRequest();
  return proto.idns.storage.MkdirRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.MkdirRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.MkdirRequest}
 */
proto.idns.storage.MkdirRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setParentId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFileName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.MkdirRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.storage.MkdirRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.MkdirRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.MkdirRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getParentId();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional uint64 parent_id = 1;
 * @return {number}
 */
proto.idns.storage.MkdirRequest.prototype.getParentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.storage.MkdirRequest.prototype.setParentId = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.idns.storage.MkdirRequest.prototype.getFileName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.storage.MkdirRequest.prototype.setFileName = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.storage.MkdirResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.storage.MkdirResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.storage.MkdirResponse.displayName =
    'proto.idns.storage.MkdirResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.storage.MkdirResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.storage.MkdirResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.storage.MkdirResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.storage.MkdirResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        result: jspb.Message.getFieldWithDefault(msg, 1, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.storage.MkdirResponse}
 */
proto.idns.storage.MkdirResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.storage.MkdirResponse();
  return proto.idns.storage.MkdirResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.storage.MkdirResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.storage.MkdirResponse}
 */
proto.idns.storage.MkdirResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.storage.MkdirResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.storage.MkdirResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.storage.MkdirResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.storage.MkdirResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool result = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.storage.MkdirResponse.prototype.getResult = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 1, false)
  );
};

/** @param {boolean} value */
proto.idns.storage.MkdirResponse.prototype.setResult = function (value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};

goog.object.extend(exports, proto.idns.storage);
