/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.idns.worker.WorkerConfig', null, global);
goog.exportSymbol('proto.idns.worker.WorkerSetConfigRequest', null, global);
goog.exportSymbol('proto.idns.worker.WorkerStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.worker.WorkerConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.worker.WorkerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.worker.WorkerConfig.displayName = 'proto.idns.worker.WorkerConfig';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.worker.WorkerConfig.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.worker.WorkerConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.worker.WorkerConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.worker.WorkerConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        maxThreads: jspb.Message.getFieldWithDefault(msg, 3, 0),
        minThreads: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.worker.WorkerConfig}
 */
proto.idns.worker.WorkerConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.worker.WorkerConfig();
  return proto.idns.worker.WorkerConfig.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.worker.WorkerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.worker.WorkerConfig}
 */
proto.idns.worker.WorkerConfig.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMaxThreads(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setMinThreads(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.worker.WorkerConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.worker.WorkerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.worker.WorkerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.worker.WorkerConfig.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getMaxThreads();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getMinThreads();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
};

/**
 * optional uint32 max_threads = 3;
 * @return {number}
 */
proto.idns.worker.WorkerConfig.prototype.getMaxThreads = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.idns.worker.WorkerConfig.prototype.setMaxThreads = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint32 min_threads = 5;
 * @return {number}
 */
proto.idns.worker.WorkerConfig.prototype.getMinThreads = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.idns.worker.WorkerConfig.prototype.setMinThreads = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.worker.WorkerStatus = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.worker.WorkerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.worker.WorkerStatus.displayName = 'proto.idns.worker.WorkerStatus';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.worker.WorkerStatus.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.worker.WorkerStatus.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.worker.WorkerStatus} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.worker.WorkerStatus.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.worker.WorkerStatus}
 */
proto.idns.worker.WorkerStatus.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.worker.WorkerStatus();
  return proto.idns.worker.WorkerStatus.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.worker.WorkerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.worker.WorkerStatus}
 */
proto.idns.worker.WorkerStatus.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.worker.WorkerStatus.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.worker.WorkerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.worker.WorkerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.worker.WorkerStatus.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.worker.WorkerSetConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.worker.WorkerSetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.worker.WorkerSetConfigRequest.displayName =
    'proto.idns.worker.WorkerSetConfigRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.worker.WorkerSetConfigRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.worker.WorkerSetConfigRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.worker.WorkerSetConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.worker.WorkerSetConfigRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        config:
          (f = msg.getConfig()) &&
          proto.idns.worker.WorkerConfig.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.worker.WorkerSetConfigRequest}
 */
proto.idns.worker.WorkerSetConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.worker.WorkerSetConfigRequest();
  return proto.idns.worker.WorkerSetConfigRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.worker.WorkerSetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.worker.WorkerSetConfigRequest}
 */
proto.idns.worker.WorkerSetConfigRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.idns.worker.WorkerConfig();
          reader.readMessage(
            value,
            proto.idns.worker.WorkerConfig.deserializeBinaryFromReader,
          );
          msg.setConfig(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.worker.WorkerSetConfigRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.worker.WorkerSetConfigRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.worker.WorkerSetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.worker.WorkerSetConfigRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.idns.worker.WorkerConfig.serializeBinaryToWriter,
    );
  }
};

/**
 * optional WorkerConfig config = 1;
 * @return {?proto.idns.worker.WorkerConfig}
 */
proto.idns.worker.WorkerSetConfigRequest.prototype.getConfig = function () {
  return /** @type{?proto.idns.worker.WorkerConfig} */ (
    jspb.Message.getWrapperField(this, proto.idns.worker.WorkerConfig, 1)
  );
};

/** @param {?proto.idns.worker.WorkerConfig|undefined} value */
proto.idns.worker.WorkerSetConfigRequest.prototype.setConfig = function (
  value,
) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.idns.worker.WorkerSetConfigRequest.prototype.clearConfig = function () {
  this.setConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.idns.worker.WorkerSetConfigRequest.prototype.hasConfig = function () {
  return jspb.Message.getField(this, 1) != null;
};

goog.object.extend(exports, proto.idns.worker);
