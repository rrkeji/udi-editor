/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.idns.networks.CreateNetworkRequest', null, global);
goog.exportSymbol('proto.idns.networks.DeleteNetworkRequest', null, global);
goog.exportSymbol('proto.idns.networks.DeviceEntity', null, global);
goog.exportSymbol('proto.idns.networks.GetDeviceConfigRequest', null, global);
goog.exportSymbol('proto.idns.networks.GetDeviceConfigResponse', null, global);
goog.exportSymbol('proto.idns.networks.GetNetworkMembersRequest', null, global);
goog.exportSymbol(
  'proto.idns.networks.GetNetworkMembersResponse',
  null,
  global,
);
goog.exportSymbol('proto.idns.networks.GetNetworkStatusRequest', null, global);
goog.exportSymbol('proto.idns.networks.IpRange', null, global);
goog.exportSymbol('proto.idns.networks.NetworkDetail', null, global);
goog.exportSymbol('proto.idns.networks.NetworkMember', null, global);
goog.exportSymbol('proto.idns.networks.NetworksResponse', null, global);
goog.exportSymbol('proto.idns.networks.Route', null, global);
goog.exportSymbol('proto.idns.networks.Rule', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.DeviceEntity = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.DeviceEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.DeviceEntity.displayName =
    'proto.idns.networks.DeviceEntity';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.DeviceEntity.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.DeviceEntity.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.DeviceEntity} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.DeviceEntity.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        deviceId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.DeviceEntity}
 */
proto.idns.networks.DeviceEntity.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.DeviceEntity();
  return proto.idns.networks.DeviceEntity.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.DeviceEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.DeviceEntity}
 */
proto.idns.networks.DeviceEntity.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeviceId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.DeviceEntity.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.DeviceEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.DeviceEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.DeviceEntity.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.idns.networks.DeviceEntity.prototype.getDeviceId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.DeviceEntity.prototype.setDeviceId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.idns.networks.DeviceEntity.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.networks.DeviceEntity.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.NetworkMember = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.NetworkMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.NetworkMember.displayName =
    'proto.idns.networks.NetworkMember';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.NetworkMember.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.NetworkMember.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.NetworkMember} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.NetworkMember.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        deviceId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
        isShared: jspb.Message.getFieldWithDefault(msg, 3, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.NetworkMember}
 */
proto.idns.networks.NetworkMember.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.NetworkMember();
  return proto.idns.networks.NetworkMember.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.NetworkMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.NetworkMember}
 */
proto.idns.networks.NetworkMember.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeviceId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsShared(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.NetworkMember.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.NetworkMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.NetworkMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.NetworkMember.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getIsShared();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.idns.networks.NetworkMember.prototype.getDeviceId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.NetworkMember.prototype.setDeviceId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.idns.networks.NetworkMember.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.networks.NetworkMember.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool is_shared = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.networks.NetworkMember.prototype.getIsShared = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 3, false)
  );
};

/** @param {boolean} value */
proto.idns.networks.NetworkMember.prototype.setIsShared = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.IpRange = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.IpRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.IpRange.displayName = 'proto.idns.networks.IpRange';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.IpRange.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.IpRange.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.IpRange} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.IpRange.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        start: jspb.Message.getFieldWithDefault(msg, 1, ''),
        end: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.IpRange}
 */
proto.idns.networks.IpRange.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.IpRange();
  return proto.idns.networks.IpRange.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.IpRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.IpRange}
 */
proto.idns.networks.IpRange.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setStart(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setEnd(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.IpRange.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.IpRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.IpRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.IpRange.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getStart();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEnd();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string start = 1;
 * @return {string}
 */
proto.idns.networks.IpRange.prototype.getStart = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.IpRange.prototype.setStart = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string end = 2;
 * @return {string}
 */
proto.idns.networks.IpRange.prototype.getEnd = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.networks.IpRange.prototype.setEnd = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.Route = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.Route.displayName = 'proto.idns.networks.Route';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.Route.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.Route.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.Route} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.Route.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        target: jspb.Message.getFieldWithDefault(msg, 1, ''),
        via: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.Route}
 */
proto.idns.networks.Route.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.Route();
  return proto.idns.networks.Route.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.Route}
 */
proto.idns.networks.Route.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTarget(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setVia(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.Route.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.Route.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVia();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string target = 1;
 * @return {string}
 */
proto.idns.networks.Route.prototype.getTarget = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.Route.prototype.setTarget = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string via = 2;
 * @return {string}
 */
proto.idns.networks.Route.prototype.getVia = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.networks.Route.prototype.setVia = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.Rule = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.Rule.displayName = 'proto.idns.networks.Rule';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.Rule.prototype.toObject = function (opt_includeInstance) {
    return proto.idns.networks.Rule.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.Rule} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.Rule.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        etherType: jspb.Message.getFieldWithDefault(msg, 1, 0),
        not: jspb.Message.getFieldWithDefault(msg, 2, false),
        or: jspb.Message.getFieldWithDefault(msg, 3, false),
        ruleType: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.Rule}
 */
proto.idns.networks.Rule.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.Rule();
  return proto.idns.networks.Rule.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.Rule}
 */
proto.idns.networks.Rule.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setEtherType(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setNot(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setOr(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setRuleType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.Rule.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.Rule.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEtherType();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getNot();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getOr();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getRuleType();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional int32 ether_type = 1;
 * @return {number}
 */
proto.idns.networks.Rule.prototype.getEtherType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.idns.networks.Rule.prototype.setEtherType = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bool not = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.networks.Rule.prototype.getNot = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 2, false)
  );
};

/** @param {boolean} value */
proto.idns.networks.Rule.prototype.setNot = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional bool or = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.networks.Rule.prototype.getOr = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 3, false)
  );
};

/** @param {boolean} value */
proto.idns.networks.Rule.prototype.setOr = function (value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string rule_type = 4;
 * @return {string}
 */
proto.idns.networks.Rule.prototype.getRuleType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.idns.networks.Rule.prototype.setRuleType = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.NetworkDetail = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.networks.NetworkDetail.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.networks.NetworkDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.NetworkDetail.displayName =
    'proto.idns.networks.NetworkDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.networks.NetworkDetail.repeatedFields_ = [2, 7, 8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.NetworkDetail.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.NetworkDetail.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.NetworkDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.NetworkDetail.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        networkId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        ipAssignmentPoolsList: jspb.Message.toObjectList(
          msg.getIpAssignmentPoolsList(),
          proto.idns.networks.IpRange.toObject,
          includeInstance,
        ),
        multicastLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
        mtu: jspb.Message.getFieldWithDefault(msg, 5, 0),
        pb_private: jspb.Message.getFieldWithDefault(msg, 6, false),
        routesList: jspb.Message.toObjectList(
          msg.getRoutesList(),
          proto.idns.networks.Route.toObject,
          includeInstance,
        ),
        rulesList: jspb.Message.toObjectList(
          msg.getRulesList(),
          proto.idns.networks.Rule.toObject,
          includeInstance,
        ),
        ssoEnabled: jspb.Message.getFieldWithDefault(msg, 9, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.NetworkDetail}
 */
proto.idns.networks.NetworkDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.NetworkDetail();
  return proto.idns.networks.NetworkDetail.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.NetworkDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.NetworkDetail}
 */
proto.idns.networks.NetworkDetail.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setNetworkId(value);
        break;
      case 2:
        var value = new proto.idns.networks.IpRange();
        reader.readMessage(
          value,
          proto.idns.networks.IpRange.deserializeBinaryFromReader,
        );
        msg.addIpAssignmentPools(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setMulticastLimit(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setMtu(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setPrivate(value);
        break;
      case 7:
        var value = new proto.idns.networks.Route();
        reader.readMessage(
          value,
          proto.idns.networks.Route.deserializeBinaryFromReader,
        );
        msg.addRoutes(value);
        break;
      case 8:
        var value = new proto.idns.networks.Rule();
        reader.readMessage(
          value,
          proto.idns.networks.Rule.deserializeBinaryFromReader,
        );
        msg.addRules(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSsoEnabled(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.NetworkDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.NetworkDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.NetworkDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.NetworkDetail.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getIpAssignmentPoolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.idns.networks.IpRange.serializeBinaryToWriter,
    );
  }
  f = message.getMulticastLimit();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getMtu();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.idns.networks.Route.serializeBinaryToWriter,
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.idns.networks.Rule.serializeBinaryToWriter,
    );
  }
  f = message.getSsoEnabled();
  if (f) {
    writer.writeBool(9, f);
  }
};

/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.idns.networks.NetworkDetail.prototype.getNetworkId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.NetworkDetail.prototype.setNetworkId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated IpRange ip_assignment_pools = 2;
 * @return {!Array<!proto.idns.networks.IpRange>}
 */
proto.idns.networks.NetworkDetail.prototype.getIpAssignmentPoolsList =
  function () {
    return /** @type{!Array<!proto.idns.networks.IpRange>} */ (
      jspb.Message.getRepeatedWrapperField(this, proto.idns.networks.IpRange, 2)
    );
  };

/** @param {!Array<!proto.idns.networks.IpRange>} value */
proto.idns.networks.NetworkDetail.prototype.setIpAssignmentPoolsList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.idns.networks.IpRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idns.networks.IpRange}
 */
proto.idns.networks.NetworkDetail.prototype.addIpAssignmentPools = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.idns.networks.IpRange,
    opt_index,
  );
};

proto.idns.networks.NetworkDetail.prototype.clearIpAssignmentPoolsList =
  function () {
    this.setIpAssignmentPoolsList([]);
  };

/**
 * optional int32 multicast_limit = 3;
 * @return {number}
 */
proto.idns.networks.NetworkDetail.prototype.getMulticastLimit = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.idns.networks.NetworkDetail.prototype.setMulticastLimit = function (
  value,
) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 mtu = 5;
 * @return {number}
 */
proto.idns.networks.NetworkDetail.prototype.getMtu = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.idns.networks.NetworkDetail.prototype.setMtu = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bool private = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.networks.NetworkDetail.prototype.getPrivate = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 6, false)
  );
};

/** @param {boolean} value */
proto.idns.networks.NetworkDetail.prototype.setPrivate = function (value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * repeated Route routes = 7;
 * @return {!Array<!proto.idns.networks.Route>}
 */
proto.idns.networks.NetworkDetail.prototype.getRoutesList = function () {
  return /** @type{!Array<!proto.idns.networks.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.idns.networks.Route, 7)
  );
};

/** @param {!Array<!proto.idns.networks.Route>} value */
proto.idns.networks.NetworkDetail.prototype.setRoutesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.idns.networks.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idns.networks.Route}
 */
proto.idns.networks.NetworkDetail.prototype.addRoutes = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    7,
    opt_value,
    proto.idns.networks.Route,
    opt_index,
  );
};

proto.idns.networks.NetworkDetail.prototype.clearRoutesList = function () {
  this.setRoutesList([]);
};

/**
 * repeated Rule rules = 8;
 * @return {!Array<!proto.idns.networks.Rule>}
 */
proto.idns.networks.NetworkDetail.prototype.getRulesList = function () {
  return /** @type{!Array<!proto.idns.networks.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.idns.networks.Rule, 8)
  );
};

/** @param {!Array<!proto.idns.networks.Rule>} value */
proto.idns.networks.NetworkDetail.prototype.setRulesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.idns.networks.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idns.networks.Rule}
 */
proto.idns.networks.NetworkDetail.prototype.addRules = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    8,
    opt_value,
    proto.idns.networks.Rule,
    opt_index,
  );
};

proto.idns.networks.NetworkDetail.prototype.clearRulesList = function () {
  this.setRulesList([]);
};

/**
 * optional bool sso_enabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.idns.networks.NetworkDetail.prototype.getSsoEnabled = function () {
  return /** @type {boolean} */ (
    jspb.Message.getFieldWithDefault(this, 9, false)
  );
};

/** @param {boolean} value */
proto.idns.networks.NetworkDetail.prototype.setSsoEnabled = function (value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.CreateNetworkRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.CreateNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.CreateNetworkRequest.displayName =
    'proto.idns.networks.CreateNetworkRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.CreateNetworkRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.CreateNetworkRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.CreateNetworkRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.CreateNetworkRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.CreateNetworkRequest}
 */
proto.idns.networks.CreateNetworkRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.CreateNetworkRequest();
  return proto.idns.networks.CreateNetworkRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.CreateNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.CreateNetworkRequest}
 */
proto.idns.networks.CreateNetworkRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.CreateNetworkRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.CreateNetworkRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.CreateNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.CreateNetworkRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.idns.networks.CreateNetworkRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.CreateNetworkRequest.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.DeleteNetworkRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.DeleteNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.DeleteNetworkRequest.displayName =
    'proto.idns.networks.DeleteNetworkRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.DeleteNetworkRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.DeleteNetworkRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.DeleteNetworkRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.DeleteNetworkRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        networkId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.DeleteNetworkRequest}
 */
proto.idns.networks.DeleteNetworkRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.DeleteNetworkRequest();
  return proto.idns.networks.DeleteNetworkRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.DeleteNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.DeleteNetworkRequest}
 */
proto.idns.networks.DeleteNetworkRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setNetworkId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.DeleteNetworkRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.DeleteNetworkRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.DeleteNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.DeleteNetworkRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.idns.networks.DeleteNetworkRequest.prototype.getNetworkId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.networks.DeleteNetworkRequest.prototype.setNetworkId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.NetworksResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.networks.NetworksResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.networks.NetworksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.NetworksResponse.displayName =
    'proto.idns.networks.NetworksResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.networks.NetworksResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.NetworksResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.NetworksResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.NetworksResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.NetworksResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        networkIdsList: jspb.Message.getRepeatedField(msg, 1),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.NetworksResponse}
 */
proto.idns.networks.NetworksResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.NetworksResponse();
  return proto.idns.networks.NetworksResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.NetworksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.NetworksResponse}
 */
proto.idns.networks.NetworksResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addNetworkIds(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.NetworksResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.networks.NetworksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.NetworksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.NetworksResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getNetworkIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string network_ids = 1;
 * @return {!Array<string>}
 */
proto.idns.networks.NetworksResponse.prototype.getNetworkIdsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/** @param {!Array<string>} value */
proto.idns.networks.NetworksResponse.prototype.setNetworkIdsList = function (
  value,
) {
  jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.idns.networks.NetworksResponse.prototype.addNetworkIds = function (
  value,
  opt_index,
) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.idns.networks.NetworksResponse.prototype.clearNetworkIdsList =
  function () {
    this.setNetworkIdsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.GetDeviceConfigRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.networks.GetDeviceConfigRequest.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.networks.GetDeviceConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.GetDeviceConfigRequest.displayName =
    'proto.idns.networks.GetDeviceConfigRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.networks.GetDeviceConfigRequest.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.GetDeviceConfigRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.GetDeviceConfigRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.GetDeviceConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.GetDeviceConfigRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        deviceIdsList: jspb.Message.getRepeatedField(msg, 1),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.GetDeviceConfigRequest}
 */
proto.idns.networks.GetDeviceConfigRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.GetDeviceConfigRequest();
  return proto.idns.networks.GetDeviceConfigRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.GetDeviceConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.GetDeviceConfigRequest}
 */
proto.idns.networks.GetDeviceConfigRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.addDeviceIds(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.GetDeviceConfigRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.GetDeviceConfigRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.GetDeviceConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.GetDeviceConfigRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getDeviceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string device_ids = 1;
 * @return {!Array<string>}
 */
proto.idns.networks.GetDeviceConfigRequest.prototype.getDeviceIdsList =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.getRepeatedField(this, 1)
    );
  };

/** @param {!Array<string>} value */
proto.idns.networks.GetDeviceConfigRequest.prototype.setDeviceIdsList =
  function (value) {
    jspb.Message.setField(this, 1, value || []);
  };

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.idns.networks.GetDeviceConfigRequest.prototype.addDeviceIds = function (
  value,
  opt_index,
) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.idns.networks.GetDeviceConfigRequest.prototype.clearDeviceIdsList =
  function () {
    this.setDeviceIdsList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.GetDeviceConfigResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.GetDeviceConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.GetDeviceConfigResponse.displayName =
    'proto.idns.networks.GetDeviceConfigResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.GetDeviceConfigResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.GetDeviceConfigResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.GetDeviceConfigResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.GetDeviceConfigResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.GetDeviceConfigResponse}
 */
proto.idns.networks.GetDeviceConfigResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.GetDeviceConfigResponse();
  return proto.idns.networks.GetDeviceConfigResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.GetDeviceConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.GetDeviceConfigResponse}
 */
proto.idns.networks.GetDeviceConfigResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.GetDeviceConfigResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.GetDeviceConfigResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.GetDeviceConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.GetDeviceConfigResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.GetNetworkStatusRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.GetNetworkStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.GetNetworkStatusRequest.displayName =
    'proto.idns.networks.GetNetworkStatusRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.GetNetworkStatusRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.GetNetworkStatusRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.GetNetworkStatusRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.GetNetworkStatusRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        networkId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.GetNetworkStatusRequest}
 */
proto.idns.networks.GetNetworkStatusRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.GetNetworkStatusRequest();
  return proto.idns.networks.GetNetworkStatusRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.GetNetworkStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.GetNetworkStatusRequest}
 */
proto.idns.networks.GetNetworkStatusRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setNetworkId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.GetNetworkStatusRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.GetNetworkStatusRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.GetNetworkStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.GetNetworkStatusRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.idns.networks.GetNetworkStatusRequest.prototype.getNetworkId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.networks.GetNetworkStatusRequest.prototype.setNetworkId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.GetNetworkMembersRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.networks.GetNetworkMembersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.GetNetworkMembersRequest.displayName =
    'proto.idns.networks.GetNetworkMembersRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.GetNetworkMembersRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.GetNetworkMembersRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.GetNetworkMembersRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.GetNetworkMembersRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        networkId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.GetNetworkMembersRequest}
 */
proto.idns.networks.GetNetworkMembersRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.GetNetworkMembersRequest();
  return proto.idns.networks.GetNetworkMembersRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.GetNetworkMembersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.GetNetworkMembersRequest}
 */
proto.idns.networks.GetNetworkMembersRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setNetworkId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.GetNetworkMembersRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.GetNetworkMembersRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.GetNetworkMembersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.GetNetworkMembersRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getNetworkId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.idns.networks.GetNetworkMembersRequest.prototype.getNetworkId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.networks.GetNetworkMembersRequest.prototype.setNetworkId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.networks.GetNetworkMembersResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.networks.GetNetworkMembersResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.networks.GetNetworkMembersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.networks.GetNetworkMembersResponse.displayName =
    'proto.idns.networks.GetNetworkMembersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.networks.GetNetworkMembersResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.networks.GetNetworkMembersResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.networks.GetNetworkMembersResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.networks.GetNetworkMembersResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.networks.GetNetworkMembersResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        networkId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        membersList: jspb.Message.toObjectList(
          msg.getMembersList(),
          proto.idns.networks.NetworkMember.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.networks.GetNetworkMembersResponse}
 */
proto.idns.networks.GetNetworkMembersResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.networks.GetNetworkMembersResponse();
  return proto.idns.networks.GetNetworkMembersResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.networks.GetNetworkMembersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.networks.GetNetworkMembersResponse}
 */
proto.idns.networks.GetNetworkMembersResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setNetworkId(value);
          break;
        case 2:
          var value = new proto.idns.networks.NetworkMember();
          reader.readMessage(
            value,
            proto.idns.networks.NetworkMember.deserializeBinaryFromReader,
          );
          msg.addMembers(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.networks.GetNetworkMembersResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.networks.GetNetworkMembersResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.networks.GetNetworkMembersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.networks.GetNetworkMembersResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getNetworkId();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getMembersList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(
        2,
        f,
        proto.idns.networks.NetworkMember.serializeBinaryToWriter,
      );
    }
  };

/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.idns.networks.GetNetworkMembersResponse.prototype.getNetworkId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.networks.GetNetworkMembersResponse.prototype.setNetworkId =
  function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * repeated NetworkMember members = 2;
 * @return {!Array<!proto.idns.networks.NetworkMember>}
 */
proto.idns.networks.GetNetworkMembersResponse.prototype.getMembersList =
  function () {
    return /** @type{!Array<!proto.idns.networks.NetworkMember>} */ (
      jspb.Message.getRepeatedWrapperField(
        this,
        proto.idns.networks.NetworkMember,
        2,
      )
    );
  };

/** @param {!Array<!proto.idns.networks.NetworkMember>} value */
proto.idns.networks.GetNetworkMembersResponse.prototype.setMembersList =
  function (value) {
    jspb.Message.setRepeatedWrapperField(this, 2, value);
  };

/**
 * @param {!proto.idns.networks.NetworkMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idns.networks.NetworkMember}
 */
proto.idns.networks.GetNetworkMembersResponse.prototype.addMembers = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.idns.networks.NetworkMember,
    opt_index,
  );
};

proto.idns.networks.GetNetworkMembersResponse.prototype.clearMembersList =
  function () {
    this.setMembersList([]);
  };

goog.object.extend(exports, proto.idns.networks);
