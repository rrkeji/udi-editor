/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.idns.account.Account', null, global);
goog.exportSymbol('proto.idns.account.DecryptMessageRequest', null, global);
goog.exportSymbol('proto.idns.account.DecryptMessageResponse', null, global);
goog.exportSymbol('proto.idns.account.EncryptMessageRequest', null, global);
goog.exportSymbol('proto.idns.account.EncryptMessageResponse', null, global);
goog.exportSymbol('proto.idns.account.GenerateAccountResponse', null, global);
goog.exportSymbol('proto.idns.account.GetAccountByIdRequest', null, global);
goog.exportSymbol('proto.idns.account.LoginRequest', null, global);
goog.exportSymbol('proto.idns.account.LoginResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.Account = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.Account.displayName = 'proto.idns.account.Account';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.Account.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.Account.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.Account} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.Account.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        publicKey: jspb.Message.getFieldWithDefault(msg, 3, ''),
        did: jspb.Message.getFieldWithDefault(msg, 4, ''),
        biography: jspb.Message.getFieldWithDefault(msg, 5, ''),
        name: jspb.Message.getFieldWithDefault(msg, 7, ''),
        avatar: jspb.Message.getFieldWithDefault(msg, 8, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.Account}
 */
proto.idns.account.Account.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.Account();
  return proto.idns.account.Account.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.Account}
 */
proto.idns.account.Account.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPublicKey(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDid(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setBiography(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setAvatar(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.Account.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.account.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.Account.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getBiography();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.idns.account.Account.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setAccountId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string public_key = 3;
 * @return {string}
 */
proto.idns.account.Account.prototype.getPublicKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setPublicKey = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string did = 4;
 * @return {string}
 */
proto.idns.account.Account.prototype.getDid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setDid = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string biography = 5;
 * @return {string}
 */
proto.idns.account.Account.prototype.getBiography = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setBiography = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string name = 7;
 * @return {string}
 */
proto.idns.account.Account.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string avatar = 8;
 * @return {string}
 */
proto.idns.account.Account.prototype.getAvatar = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/** @param {string} value */
proto.idns.account.Account.prototype.setAvatar = function (value) {
  jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.GenerateAccountResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.GenerateAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.GenerateAccountResponse.displayName =
    'proto.idns.account.GenerateAccountResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.GenerateAccountResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.GenerateAccountResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.GenerateAccountResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.GenerateAccountResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        secretPhrase: jspb.Message.getFieldWithDefault(msg, 1, ''),
        secretSeed: jspb.Message.getFieldWithDefault(msg, 2, ''),
        publicKey: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.GenerateAccountResponse}
 */
proto.idns.account.GenerateAccountResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.GenerateAccountResponse();
  return proto.idns.account.GenerateAccountResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.GenerateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.GenerateAccountResponse}
 */
proto.idns.account.GenerateAccountResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setAccountId(value);
          break;
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setSecretPhrase(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setSecretSeed(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setPublicKey(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.GenerateAccountResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.GenerateAccountResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.GenerateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.GenerateAccountResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSecretPhrase();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSecretSeed();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string account_id = 4;
 * @return {string}
 */
proto.idns.account.GenerateAccountResponse.prototype.getAccountId =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 4, '')
    );
  };

/** @param {string} value */
proto.idns.account.GenerateAccountResponse.prototype.setAccountId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string secret_phrase = 1;
 * @return {string}
 */
proto.idns.account.GenerateAccountResponse.prototype.getSecretPhrase =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.account.GenerateAccountResponse.prototype.setSecretPhrase =
  function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * optional string secret_seed = 2;
 * @return {string}
 */
proto.idns.account.GenerateAccountResponse.prototype.getSecretSeed =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/** @param {string} value */
proto.idns.account.GenerateAccountResponse.prototype.setSecretSeed = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string public_key = 3;
 * @return {string}
 */
proto.idns.account.GenerateAccountResponse.prototype.getPublicKey =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 3, '')
    );
  };

/** @param {string} value */
proto.idns.account.GenerateAccountResponse.prototype.setPublicKey = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.GetAccountByIdRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.GetAccountByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.GetAccountByIdRequest.displayName =
    'proto.idns.account.GetAccountByIdRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.GetAccountByIdRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.GetAccountByIdRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.GetAccountByIdRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.GetAccountByIdRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.GetAccountByIdRequest}
 */
proto.idns.account.GetAccountByIdRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.GetAccountByIdRequest();
  return proto.idns.account.GetAccountByIdRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.GetAccountByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.GetAccountByIdRequest}
 */
proto.idns.account.GetAccountByIdRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setAccountId(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.GetAccountByIdRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.GetAccountByIdRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.GetAccountByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.GetAccountByIdRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.idns.account.GetAccountByIdRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.GetAccountByIdRequest.prototype.setAccountId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.EncryptMessageRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.EncryptMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.EncryptMessageRequest.displayName =
    'proto.idns.account.EncryptMessageRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.EncryptMessageRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.EncryptMessageRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.EncryptMessageRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.EncryptMessageRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        plain: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.EncryptMessageRequest}
 */
proto.idns.account.EncryptMessageRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.EncryptMessageRequest();
  return proto.idns.account.EncryptMessageRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.EncryptMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.EncryptMessageRequest}
 */
proto.idns.account.EncryptMessageRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setPlain(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setPassword(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.EncryptMessageRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.EncryptMessageRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.EncryptMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.EncryptMessageRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPlain();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string plain = 1;
 * @return {string}
 */
proto.idns.account.EncryptMessageRequest.prototype.getPlain = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageRequest.prototype.setPlain = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 5;
 * @return {string}
 */
proto.idns.account.EncryptMessageRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageRequest.prototype.setPassword = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.EncryptMessageResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.EncryptMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.EncryptMessageResponse.displayName =
    'proto.idns.account.EncryptMessageResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.EncryptMessageResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.EncryptMessageResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.EncryptMessageResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.EncryptMessageResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        salt: jspb.Message.getFieldWithDefault(msg, 1, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 3, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        cipher: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.EncryptMessageResponse}
 */
proto.idns.account.EncryptMessageResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.EncryptMessageResponse();
  return proto.idns.account.EncryptMessageResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.EncryptMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.EncryptMessageResponse}
 */
proto.idns.account.EncryptMessageResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setSalt(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setNonce(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setAccountId(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setCipher(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.EncryptMessageResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.EncryptMessageResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.EncryptMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.EncryptMessageResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSalt();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getCipher();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string salt = 1;
 * @return {string}
 */
proto.idns.account.EncryptMessageResponse.prototype.getSalt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageResponse.prototype.setSalt = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string nonce = 3;
 * @return {string}
 */
proto.idns.account.EncryptMessageResponse.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageResponse.prototype.setNonce = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string account_id = 4;
 * @return {string}
 */
proto.idns.account.EncryptMessageResponse.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageResponse.prototype.setAccountId = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string cipher = 5;
 * @return {string}
 */
proto.idns.account.EncryptMessageResponse.prototype.getCipher = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.idns.account.EncryptMessageResponse.prototype.setCipher = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.DecryptMessageRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.DecryptMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.DecryptMessageRequest.displayName =
    'proto.idns.account.DecryptMessageRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.DecryptMessageRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.DecryptMessageRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.DecryptMessageRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.DecryptMessageRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        salt: jspb.Message.getFieldWithDefault(msg, 1, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 3, ''),
        cipher: jspb.Message.getFieldWithDefault(msg, 5, ''),
        password: jspb.Message.getFieldWithDefault(msg, 7, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.DecryptMessageRequest}
 */
proto.idns.account.DecryptMessageRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.DecryptMessageRequest();
  return proto.idns.account.DecryptMessageRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.DecryptMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.DecryptMessageRequest}
 */
proto.idns.account.DecryptMessageRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setSalt(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setNonce(value);
          break;
        case 5:
          var value = /** @type {string} */ (reader.readString());
          msg.setCipher(value);
          break;
        case 7:
          var value = /** @type {string} */ (reader.readString());
          msg.setPassword(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.DecryptMessageRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.DecryptMessageRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.DecryptMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.DecryptMessageRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSalt();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getCipher();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
};

/**
 * optional string salt = 1;
 * @return {string}
 */
proto.idns.account.DecryptMessageRequest.prototype.getSalt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.DecryptMessageRequest.prototype.setSalt = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string nonce = 3;
 * @return {string}
 */
proto.idns.account.DecryptMessageRequest.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.account.DecryptMessageRequest.prototype.setNonce = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string cipher = 5;
 * @return {string}
 */
proto.idns.account.DecryptMessageRequest.prototype.getCipher = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.idns.account.DecryptMessageRequest.prototype.setCipher = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string password = 7;
 * @return {string}
 */
proto.idns.account.DecryptMessageRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/** @param {string} value */
proto.idns.account.DecryptMessageRequest.prototype.setPassword = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.DecryptMessageResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.DecryptMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.DecryptMessageResponse.displayName =
    'proto.idns.account.DecryptMessageResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.DecryptMessageResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.DecryptMessageResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.DecryptMessageResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.DecryptMessageResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        plain: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.DecryptMessageResponse}
 */
proto.idns.account.DecryptMessageResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.DecryptMessageResponse();
  return proto.idns.account.DecryptMessageResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.DecryptMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.DecryptMessageResponse}
 */
proto.idns.account.DecryptMessageResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setPlain(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.DecryptMessageResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.account.DecryptMessageResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.DecryptMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.DecryptMessageResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPlain();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string plain = 1;
 * @return {string}
 */
proto.idns.account.DecryptMessageResponse.prototype.getPlain = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.DecryptMessageResponse.prototype.setPlain = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.LoginRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.LoginRequest.displayName =
    'proto.idns.account.LoginRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.LoginRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.LoginRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.LoginRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.LoginRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
        phrase: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.LoginRequest}
 */
proto.idns.account.LoginRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.LoginRequest();
  return proto.idns.account.LoginRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.LoginRequest}
 */
proto.idns.account.LoginRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPhrase(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.LoginRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.account.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.LoginRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPhrase();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.idns.account.LoginRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.account.LoginRequest.prototype.setPassword = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string phrase = 3;
 * @return {string}
 */
proto.idns.account.LoginRequest.prototype.getPhrase = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.account.LoginRequest.prototype.setPhrase = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.account.LoginResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.account.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.account.LoginResponse.displayName =
    'proto.idns.account.LoginResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.account.LoginResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.account.LoginResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.account.LoginResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.account.LoginResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        publicKey: jspb.Message.getFieldWithDefault(msg, 1, ''),
        applicationKey: jspb.Message.getFieldWithDefault(msg, 2, ''),
        token: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.account.LoginResponse}
 */
proto.idns.account.LoginResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.account.LoginResponse();
  return proto.idns.account.LoginResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.account.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.account.LoginResponse}
 */
proto.idns.account.LoginResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPublicKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setApplicationKey(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.account.LoginResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.account.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.account.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.account.LoginResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getApplicationKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.idns.account.LoginResponse.prototype.getPublicKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.account.LoginResponse.prototype.setPublicKey = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string application_key = 2;
 * @return {string}
 */
proto.idns.account.LoginResponse.prototype.getApplicationKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.account.LoginResponse.prototype.setApplicationKey = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token = 3;
 * @return {string}
 */
proto.idns.account.LoginResponse.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.idns.account.LoginResponse.prototype.setToken = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

goog.object.extend(exports, proto.idns.account);
