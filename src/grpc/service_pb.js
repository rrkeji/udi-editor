/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol(
  'proto.idns.service.RetrieveServiceByNameRequest',
  null,
  global,
);
goog.exportSymbol(
  'proto.idns.service.RetrieveServiceByNameResponse',
  null,
  global,
);
goog.exportSymbol('proto.idns.service.SaveServiceNsRequest', null, global);
goog.exportSymbol('proto.idns.service.SaveServiceNsResponse', null, global);
goog.exportSymbol('proto.idns.service.SendHttpPackageRequest', null, global);
goog.exportSymbol('proto.idns.service.SendHttpPackageResponse', null, global);
goog.exportSymbol('proto.idns.service.SendPackagesRequest', null, global);
goog.exportSymbol('proto.idns.service.SendPackagesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.RetrieveServiceByNameRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.RetrieveServiceByNameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.RetrieveServiceByNameRequest.displayName =
    'proto.idns.service.RetrieveServiceByNameRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.RetrieveServiceByNameRequest.prototype.toObject =
    function (opt_includeInstance) {
      return proto.idns.service.RetrieveServiceByNameRequest.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.RetrieveServiceByNameRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.RetrieveServiceByNameRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        serviceName: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.RetrieveServiceByNameRequest}
 */
proto.idns.service.RetrieveServiceByNameRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.RetrieveServiceByNameRequest();
  return proto.idns.service.RetrieveServiceByNameRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.RetrieveServiceByNameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.RetrieveServiceByNameRequest}
 */
proto.idns.service.RetrieveServiceByNameRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setServiceName(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.RetrieveServiceByNameRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.RetrieveServiceByNameRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.RetrieveServiceByNameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.RetrieveServiceByNameRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getServiceName();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.idns.service.RetrieveServiceByNameRequest.prototype.getServiceName =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.service.RetrieveServiceByNameRequest.prototype.setServiceName =
  function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.RetrieveServiceByNameResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.RetrieveServiceByNameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.RetrieveServiceByNameResponse.displayName =
    'proto.idns.service.RetrieveServiceByNameResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.RetrieveServiceByNameResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.idns.service.RetrieveServiceByNameResponse.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.RetrieveServiceByNameResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.RetrieveServiceByNameResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        serviceAddr: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.RetrieveServiceByNameResponse}
 */
proto.idns.service.RetrieveServiceByNameResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.RetrieveServiceByNameResponse();
  return proto.idns.service.RetrieveServiceByNameResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.RetrieveServiceByNameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.RetrieveServiceByNameResponse}
 */
proto.idns.service.RetrieveServiceByNameResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setServiceAddr(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.RetrieveServiceByNameResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.RetrieveServiceByNameResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.RetrieveServiceByNameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.RetrieveServiceByNameResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getServiceAddr();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
  };

/**
 * optional string service_addr = 1;
 * @return {string}
 */
proto.idns.service.RetrieveServiceByNameResponse.prototype.getServiceAddr =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.service.RetrieveServiceByNameResponse.prototype.setServiceAddr =
  function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SaveServiceNsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.SaveServiceNsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SaveServiceNsRequest.displayName =
    'proto.idns.service.SaveServiceNsRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SaveServiceNsRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SaveServiceNsRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SaveServiceNsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SaveServiceNsRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SaveServiceNsRequest}
 */
proto.idns.service.SaveServiceNsRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SaveServiceNsRequest();
  return proto.idns.service.SaveServiceNsRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SaveServiceNsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SaveServiceNsRequest}
 */
proto.idns.service.SaveServiceNsRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SaveServiceNsRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.SaveServiceNsRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SaveServiceNsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SaveServiceNsRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SaveServiceNsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.SaveServiceNsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SaveServiceNsResponse.displayName =
    'proto.idns.service.SaveServiceNsResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SaveServiceNsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SaveServiceNsResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SaveServiceNsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SaveServiceNsResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SaveServiceNsResponse}
 */
proto.idns.service.SaveServiceNsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SaveServiceNsResponse();
  return proto.idns.service.SaveServiceNsResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SaveServiceNsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SaveServiceNsResponse}
 */
proto.idns.service.SaveServiceNsResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SaveServiceNsResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.SaveServiceNsResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SaveServiceNsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SaveServiceNsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SendPackagesRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.service.SendPackagesRequest.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.service.SendPackagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SendPackagesRequest.displayName =
    'proto.idns.service.SendPackagesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.service.SendPackagesRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SendPackagesRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SendPackagesRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SendPackagesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SendPackagesRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        serviceAddr: jspb.Message.getFieldWithDefault(msg, 1, ''),
        packagesList: msg.getPackagesList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SendPackagesRequest}
 */
proto.idns.service.SendPackagesRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SendPackagesRequest();
  return proto.idns.service.SendPackagesRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SendPackagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SendPackagesRequest}
 */
proto.idns.service.SendPackagesRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setServiceAddr(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addPackages(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SendPackagesRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.idns.service.SendPackagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SendPackagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SendPackagesRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getServiceAddr();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPackagesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(2, f);
  }
};

/**
 * optional string service_addr = 1;
 * @return {string}
 */
proto.idns.service.SendPackagesRequest.prototype.getServiceAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.idns.service.SendPackagesRequest.prototype.setServiceAddr = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated bytes packages = 2;
 * @return {!Array<string>}
 */
proto.idns.service.SendPackagesRequest.prototype.getPackagesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * repeated bytes packages = 2;
 * This is a type-conversion wrapper around `getPackagesList()`
 * @return {!Array<string>}
 */
proto.idns.service.SendPackagesRequest.prototype.getPackagesList_asB64 =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.bytesListAsB64(this.getPackagesList())
    );
  };

/**
 * repeated bytes packages = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPackagesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.idns.service.SendPackagesRequest.prototype.getPackagesList_asU8 =
  function () {
    return /** @type {!Array<!Uint8Array>} */ (
      jspb.Message.bytesListAsU8(this.getPackagesList())
    );
  };

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.idns.service.SendPackagesRequest.prototype.setPackagesList = function (
  value,
) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.idns.service.SendPackagesRequest.prototype.addPackages = function (
  value,
  opt_index,
) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.idns.service.SendPackagesRequest.prototype.clearPackagesList =
  function () {
    this.setPackagesList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SendPackagesResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.SendPackagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SendPackagesResponse.displayName =
    'proto.idns.service.SendPackagesResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SendPackagesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SendPackagesResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SendPackagesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SendPackagesResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SendPackagesResponse}
 */
proto.idns.service.SendPackagesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SendPackagesResponse();
  return proto.idns.service.SendPackagesResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SendPackagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SendPackagesResponse}
 */
proto.idns.service.SendPackagesResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SendPackagesResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.SendPackagesResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SendPackagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SendPackagesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SendHttpPackageRequest = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idns.service.SendHttpPackageRequest.repeatedFields_,
    null,
  );
};
goog.inherits(proto.idns.service.SendHttpPackageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SendHttpPackageRequest.displayName =
    'proto.idns.service.SendHttpPackageRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idns.service.SendHttpPackageRequest.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SendHttpPackageRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SendHttpPackageRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SendHttpPackageRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SendHttpPackageRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        serviceAddr: jspb.Message.getFieldWithDefault(msg, 1, ''),
        method: jspb.Message.getFieldWithDefault(msg, 2, ''),
        headersMap: (f = msg.getHeadersMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        bodyList: msg.getBodyList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SendHttpPackageRequest}
 */
proto.idns.service.SendHttpPackageRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SendHttpPackageRequest();
  return proto.idns.service.SendHttpPackageRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SendHttpPackageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SendHttpPackageRequest}
 */
proto.idns.service.SendHttpPackageRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setServiceAddr(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setMethod(value);
          break;
        case 3:
          var value = msg.getHeadersMap();
          reader.readMessage(value, function (message, reader) {
            jspb.Map.deserializeBinary(
              message,
              reader,
              jspb.BinaryReader.prototype.readString,
              jspb.BinaryReader.prototype.readString,
              null,
              '',
            );
          });
          break;
        case 4:
          var value = /** @type {!Uint8Array} */ (reader.readBytes());
          msg.addBody(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SendHttpPackageRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.SendHttpPackageRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SendHttpPackageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SendHttpPackageRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getServiceAddr();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString,
    );
  }
  f = message.getBodyList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(4, f);
  }
};

/**
 * optional string service_addr = 1;
 * @return {string}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getServiceAddr =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/** @param {string} value */
proto.idns.service.SendHttpPackageRequest.prototype.setServiceAddr = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string method = 2;
 * @return {string}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getMethod = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.idns.service.SendHttpPackageRequest.prototype.setMethod = function (
  value,
) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * map<string, string> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getHeadersMap = function (
  opt_noLazyCreate,
) {
  return /** @type {!jspb.Map<string,string>} */ (
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

proto.idns.service.SendHttpPackageRequest.prototype.clearHeadersMap =
  function () {
    this.getHeadersMap().clear();
  };

/**
 * repeated bytes body = 4;
 * @return {!Array<string>}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getBodyList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * repeated bytes body = 4;
 * This is a type-conversion wrapper around `getBodyList()`
 * @return {!Array<string>}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getBodyList_asB64 =
  function () {
    return /** @type {!Array<string>} */ (
      jspb.Message.bytesListAsB64(this.getBodyList())
    );
  };

/**
 * repeated bytes body = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyList()`
 * @return {!Array<!Uint8Array>}
 */
proto.idns.service.SendHttpPackageRequest.prototype.getBodyList_asU8 =
  function () {
    return /** @type {!Array<!Uint8Array>} */ (
      jspb.Message.bytesListAsU8(this.getBodyList())
    );
  };

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.idns.service.SendHttpPackageRequest.prototype.setBodyList = function (
  value,
) {
  jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.idns.service.SendHttpPackageRequest.prototype.addBody = function (
  value,
  opt_index,
) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

proto.idns.service.SendHttpPackageRequest.prototype.clearBodyList =
  function () {
    this.setBodyList([]);
  };

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idns.service.SendHttpPackageResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idns.service.SendHttpPackageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.idns.service.SendHttpPackageResponse.displayName =
    'proto.idns.service.SendHttpPackageResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idns.service.SendHttpPackageResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.idns.service.SendHttpPackageResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idns.service.SendHttpPackageResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idns.service.SendHttpPackageResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idns.service.SendHttpPackageResponse}
 */
proto.idns.service.SendHttpPackageResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idns.service.SendHttpPackageResponse();
  return proto.idns.service.SendHttpPackageResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idns.service.SendHttpPackageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idns.service.SendHttpPackageResponse}
 */
proto.idns.service.SendHttpPackageResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idns.service.SendHttpPackageResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.idns.service.SendHttpPackageResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idns.service.SendHttpPackageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idns.service.SendHttpPackageResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
};

goog.object.extend(exports, proto.idns.service);
